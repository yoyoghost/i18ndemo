-- 2019年10月21日

各个locale所代表的的国家代码
https://www.viralpatel.net/java-locale-list-tutorial/

国际化的主要技术点是获取当前所需要展示的语言。

根据jdk提供的语言包我们可以获取语言或者国家信息
Locale locale = RequestContextUtils.getLocale(request);
log.info("locale is {}", locale);

然后根据locale来去获取响应语言的消息或者提示即可

1. properties 但是需要动态实时加载，需要一定的技术成本，国家越多，需要创建的properties文件就越多
msg_cn_ZH.properties
msg_en_US.properties
……………

2. 使用 数据库+缓存 的操作，可以实时添加，需要配套的后台管理录入或编辑界面，比较灵活
数据库 i18n表 字段信息 id，国家信息country，key，value，备注 等
也可以在加个国家的字典表信息 id，国家中文名，locale编码（cn_ZH），方便页面录入


根据数据库字段的自动增加表单input元素的也可以使用这种流程来实现多语言国际化


-- 2019年10月22日

技术流程图  业务流程图


需要注意的问题
1. 数据预热
2. 防止缓存穿透
3. 必要的告警，防止服务不可用

先内存，再redis，再数据库
redis或者内存中的存储格式

1. 告警提示多语言
2. 可编辑的表单字段多语言
3. 其他
不同的系统，相同系统的不同的模块，不同的字段
系统+模块+类型+字段名称 来确定一个唯一的key。然后 key+locale 来获取信息

key = 系统+模块+类型+字段名称

前端登录成功以后需要先获取用户所选择的语言。
1. 用户登录，没有找到之前选择语言。我们就用当前request中的locale信息来获取用户浏览器的默认语言。
2. 用户登录，存在之前选择的语言，则直接返回该语言标示，并在前端进行国际化，初始化相关界面。


怎么知道这次请求需要国际化呢
1. 使用方主动调用？提供多语言转换的方法


用户的国际化数据的存储
1. 存储在原系统 数据库 + 缓存


提供方式
1. 单独提供一个系统，eurake调用  我们现在有eurake server吧？
2. 提供两个接口，单个查询 和 多个查询。以用来提高性能。


该系统是独立的，不存在和别的系统有交集。因为涉及多个系统的多语言国际化。
1. 系统维护  系统编码+系统名称
2. 模块维护  所属系统 模块名称 模块编码
3. 类型维护(国际化的类型) 这个好像不需要，系统根据key拿到自己国际化的东西就可以了，不关心是什么类型的key，不做参数，不做唯一。只是系统展示的一个筛选。
1+2 资源中心？

国际化信息的增删改查。提供一个工具类(国际化的枚举类)。
枚举类中有默认值。

--
这样的话，我们的国际化，就和拦截器，过滤器没什么关系了，拦截器和过滤器只是为了获取locale信息。然后通过resourceboundle获取国际化信息。
我们现在使用缓存+数据库，只要是获取我们协定好的国家编码(这里要和locale统一)，就可以获取相应的信息了。

shiro 用户中心 session
从session中获取用户的语言信息